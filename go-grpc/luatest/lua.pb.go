// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.2
// source: lua.proto

package luatest

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RunFunctionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FuncName string `protobuf:"bytes,1,opt,name=funcName,proto3" json:"funcName,omitempty"`
}

func (x *RunFunctionRequest) Reset() {
	*x = RunFunctionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lua_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunFunctionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunFunctionRequest) ProtoMessage() {}

func (x *RunFunctionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lua_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunFunctionRequest.ProtoReflect.Descriptor instead.
func (*RunFunctionRequest) Descriptor() ([]byte, []int) {
	return file_lua_proto_rawDescGZIP(), []int{0}
}

func (x *RunFunctionRequest) GetFuncName() string {
	if x != nil {
		return x.FuncName
	}
	return ""
}

type RunFunctionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FuncResponse string `protobuf:"bytes,1,opt,name=funcResponse,proto3" json:"funcResponse,omitempty"`
}

func (x *RunFunctionResponse) Reset() {
	*x = RunFunctionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lua_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunFunctionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunFunctionResponse) ProtoMessage() {}

func (x *RunFunctionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lua_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunFunctionResponse.ProtoReflect.Descriptor instead.
func (*RunFunctionResponse) Descriptor() ([]byte, []int) {
	return file_lua_proto_rawDescGZIP(), []int{1}
}

func (x *RunFunctionResponse) GetFuncResponse() string {
	if x != nil {
		return x.FuncResponse
	}
	return ""
}

type GetNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNamesRequest) Reset() {
	*x = GetNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lua_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamesRequest) ProtoMessage() {}

func (x *GetNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lua_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamesRequest.ProtoReflect.Descriptor instead.
func (*GetNamesRequest) Descriptor() ([]byte, []int) {
	return file_lua_proto_rawDescGZIP(), []int{2}
}

type GetNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FuncNames []string `protobuf:"bytes,1,rep,name=funcNames,proto3" json:"funcNames,omitempty"`
}

func (x *GetNamesResponse) Reset() {
	*x = GetNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lua_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamesResponse) ProtoMessage() {}

func (x *GetNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lua_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamesResponse.ProtoReflect.Descriptor instead.
func (*GetNamesResponse) Descriptor() ([]byte, []int) {
	return file_lua_proto_rawDescGZIP(), []int{3}
}

func (x *GetNamesResponse) GetFuncNames() []string {
	if x != nil {
		return x.FuncNames
	}
	return nil
}

var File_lua_proto protoreflect.FileDescriptor

var file_lua_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6c, 0x75, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6c, 0x75, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x22, 0x30, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x13, 0x52, 0x75, 0x6e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x75, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x30, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x75, 0x6e,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x32, 0x97, 0x01, 0x0a, 0x0a, 0x4c, 0x75, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x75, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x6c, 0x75,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lua_proto_rawDescOnce sync.Once
	file_lua_proto_rawDescData = file_lua_proto_rawDesc
)

func file_lua_proto_rawDescGZIP() []byte {
	file_lua_proto_rawDescOnce.Do(func() {
		file_lua_proto_rawDescData = protoimpl.X.CompressGZIP(file_lua_proto_rawDescData)
	})
	return file_lua_proto_rawDescData
}

var file_lua_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_lua_proto_goTypes = []interface{}{
	(*RunFunctionRequest)(nil),  // 0: luatest.RunFunctionRequest
	(*RunFunctionResponse)(nil), // 1: luatest.RunFunctionResponse
	(*GetNamesRequest)(nil),     // 2: luatest.GetNamesRequest
	(*GetNamesResponse)(nil),    // 3: luatest.GetNamesResponse
}
var file_lua_proto_depIdxs = []int32{
	0, // 0: luatest.LuaService.RunFunction:input_type -> luatest.RunFunctionRequest
	2, // 1: luatest.LuaService.GetNames:input_type -> luatest.GetNamesRequest
	1, // 2: luatest.LuaService.RunFunction:output_type -> luatest.RunFunctionResponse
	3, // 3: luatest.LuaService.GetNames:output_type -> luatest.GetNamesResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_lua_proto_init() }
func file_lua_proto_init() {
	if File_lua_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lua_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunFunctionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lua_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunFunctionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lua_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lua_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lua_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lua_proto_goTypes,
		DependencyIndexes: file_lua_proto_depIdxs,
		MessageInfos:      file_lua_proto_msgTypes,
	}.Build()
	File_lua_proto = out.File
	file_lua_proto_rawDesc = nil
	file_lua_proto_goTypes = nil
	file_lua_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LuaServiceClient is the client API for LuaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LuaServiceClient interface {
	RunFunction(ctx context.Context, in *RunFunctionRequest, opts ...grpc.CallOption) (*RunFunctionResponse, error)
	GetNames(ctx context.Context, in *GetNamesRequest, opts ...grpc.CallOption) (*GetNamesResponse, error)
}

type luaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLuaServiceClient(cc grpc.ClientConnInterface) LuaServiceClient {
	return &luaServiceClient{cc}
}

func (c *luaServiceClient) RunFunction(ctx context.Context, in *RunFunctionRequest, opts ...grpc.CallOption) (*RunFunctionResponse, error) {
	out := new(RunFunctionResponse)
	err := c.cc.Invoke(ctx, "/luatest.LuaService/RunFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luaServiceClient) GetNames(ctx context.Context, in *GetNamesRequest, opts ...grpc.CallOption) (*GetNamesResponse, error) {
	out := new(GetNamesResponse)
	err := c.cc.Invoke(ctx, "/luatest.LuaService/GetNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LuaServiceServer is the server API for LuaService service.
type LuaServiceServer interface {
	RunFunction(context.Context, *RunFunctionRequest) (*RunFunctionResponse, error)
	GetNames(context.Context, *GetNamesRequest) (*GetNamesResponse, error)
}

// UnimplementedLuaServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLuaServiceServer struct {
}

func (*UnimplementedLuaServiceServer) RunFunction(context.Context, *RunFunctionRequest) (*RunFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunFunction not implemented")
}
func (*UnimplementedLuaServiceServer) GetNames(context.Context, *GetNamesRequest) (*GetNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNames not implemented")
}

func RegisterLuaServiceServer(s *grpc.Server, srv LuaServiceServer) {
	s.RegisterService(&_LuaService_serviceDesc, srv)
}

func _LuaService_RunFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuaServiceServer).RunFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luatest.LuaService/RunFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuaServiceServer).RunFunction(ctx, req.(*RunFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuaService_GetNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuaServiceServer).GetNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luatest.LuaService/GetNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuaServiceServer).GetNames(ctx, req.(*GetNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LuaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luatest.LuaService",
	HandlerType: (*LuaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunFunction",
			Handler:    _LuaService_RunFunction_Handler,
		},
		{
			MethodName: "GetNames",
			Handler:    _LuaService_GetNames_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lua.proto",
}
